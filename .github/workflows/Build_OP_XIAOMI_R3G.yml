name: Build_xiaomir3g

on:
  workflow_dispatch:
  
  schedule:
    - cron: 0 4 * * *
    
  #release:
  #  types: [published]

  # push:
  #  branches: 
  #    - master

  #schedule:
  #  - cron: 0 8 * * 5
  
  #watch:
  #  types: [started]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DEBIAN_FRONTEND: noninteractive
      REPO_URL: https://github.com/coolsnowwolf/lede
      REPO_BRANCH: master
      CONFIG_FILE: 'xiaomi_r3g.config'
      GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      run: |
        set +e
        docker rmi $(docker images -q)
        echo "Deleting unnecessary files, please wait ..."
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt-get update
        sudo -E apt-get -y install \
          build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip \
          zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev \
          texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler \
          g++-multilib antlr3 gperf wget curl swig rsync aria2 ca-certificates python3-pyelftools python-pyelftools yasm libtinfo5
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean

    - name: Echo host info
      run: |
        echo "-------------------------- CPU 信息 --------------------------"
        echo "CPU 物理数量: $(grep 'physical id' /proc/cpuinfo | sort -u | wc -l)"
        echo "CPU 核心数量: $(nproc)"
        echo "CPU 型号: $(grep -m1 'model name' /proc/cpuinfo | cut -d: -f2-)"
        echo "-------------------------- 内存信息 --------------------------"
        echo "已安装内存:"
        sudo lshw -short -C memory | grep GiB
        echo "-------------------------- 硬盘信息 --------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)"
        df -hT

    - name: Clone source code
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        sudo mv openwrt /mnt/ && sudo ln -s /mnt/openwrt ./ && sudo chown -R $USER:$GROUPS /mnt/openwrt
        cd openwrt
        sed -i '1i src-git kenzo https://github.com/kenzok8/openwrt-packages' feeds.conf.default
        sed -i '2i src-git small https://github.com/kenzok8/small' feeds.conf.default
        
    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Configuration Customization - Build_x86_64
      run: |
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x ./customize.sh && ./customize.sh
        cd openwrt && make defconfig
        
    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build firmware
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) threads for build."
        make -j$(nproc) V=s
        cp .config bin/

    - name: Upload artifact
      uses: actions/upload-artifact@master
      with:
        name: OpenWrt_bin${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 删除运行记录
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 3
        keep_minimum_runs: 1
        token: ${{ env.GITHUB_TOKEN }}
